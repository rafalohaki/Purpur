From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Xymb <xymb@endcrystal.me>
Date: Mon, 30 Jan 2023 06:29:02 +0100
Subject: [PATCH] Fix donkey/boat logout dupe.


diff --git a/src/main/java/puregero/multipaper/MultiPaperEntitiesHandler.java b/src/main/java/puregero/multipaper/MultiPaperEntitiesHandler.java
index ff7c1726c323a104bac9a9a8b3a8ea6d6414dc75..56ca5e1f86adebcf5d4dffab9748b299e70362db 100644
--- a/src/main/java/puregero/multipaper/MultiPaperEntitiesHandler.java
+++ b/src/main/java/puregero/multipaper/MultiPaperEntitiesHandler.java
@@ -347,11 +347,11 @@ public class MultiPaperEntitiesHandler {
         if (!shouldSyncEntity(entity) && MultiPaperEntitiesHandler.getControllingPassenger(entity) == entity && !entity.isPassenger() && !(entity instanceof Player && reason == Entity.RemovalReason.KILLED)) return;
         if (removingEntity) return;
         if (entity instanceof ExternalPlayer) return;
-        if (reason == Entity.RemovalReason.UNLOADED_TO_CHUNK || reason == Entity.RemovalReason.UNLOADED_WITH_PLAYER) return;
+        if (reason == Entity.RemovalReason.UNLOADED_TO_CHUNK) return;
 
         LevelChunk chunk = entity.level.getChunkIfLoaded(entity.blockPosition());
         if (chunk != null) {
-            MultiPaper.broadcastPacketToExternalServers(chunk.externalEntitiesSubscribers, () -> new EntityRemovePacket(entity));
+            MultiPaper.broadcastPacketToExternalServers(chunk.externalEntitiesSubscribers, () -> new EntityRemovePacket(entity, reason == Entity.RemovalReason.UNLOADED_WITH_PLAYER));
         } else {
             LOGGER.warn(entity + " removed in an unloaded chunk");
         }
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/EntityRemovePacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/EntityRemovePacket.java
index 219d4f75fb195fe936b5fa647829e753e9ef1363..e57d696885644dace9d0f9000d8e33d8e80aecfe 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/EntityRemovePacket.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/EntityRemovePacket.java
@@ -20,25 +20,29 @@ public class EntityRemovePacket extends ExternalServerPacket {
 
     private final String world;
     private final UUID uuid;
+    private boolean unloadedWithPlayer;
 
-    public EntityRemovePacket(Entity entity) {
-        this(((ServerLevel) entity.level).convertable.getLevelId(), entity.getUUID());
+    public EntityRemovePacket(Entity entity, boolean unloadedWithPlayer) {
+        this(((ServerLevel) entity.level).convertable.getLevelId(), entity.getUUID(), unloadedWithPlayer);
     }
 
-    public EntityRemovePacket(String world, UUID uuid) {
+    public EntityRemovePacket(String world, UUID uuid, boolean unloadedWithPlayer) {
         this.world = world;
         this.uuid = uuid;
+        this.unloadedWithPlayer = unloadedWithPlayer;
     }
 
     public EntityRemovePacket(FriendlyByteBuf in) {
         this.world = in.readUtf();
         this.uuid = in.readUUID();
+        this.unloadedWithPlayer = in.readBoolean();
     }
 
     @Override
     public void write(FriendlyByteBuf out) {
         out.writeUtf(world);
         out.writeUUID(uuid);
+        out.writeBoolean(this.unloadedWithPlayer);
     }
 
     @Override
@@ -48,9 +52,11 @@ public class EntityRemovePacket extends ExternalServerPacket {
             Entity entity = level.entityManager.knownUuids.get(uuid);
             if (entity != null) {
                 MultiPaperEntitiesHandler.removingEntity = true;
-                entity.setRemoved(entity instanceof Player ? Entity.RemovalReason.KILLED : Entity.RemovalReason.DISCARDED);
+                Entity.RemovalReason reason = entity instanceof Player ? Entity.RemovalReason.KILLED : Entity.RemovalReason.DISCARDED;
+                if (this.unloadedWithPlayer) reason = Entity.RemovalReason.UNLOADED_WITH_PLAYER;
+                entity.setRemoved(reason);
                 MultiPaperEntitiesHandler.removingEntity = false;
-            } else {
+            } else if (!this.unloadedWithPlayer) {
                 setEntityRemoved(uuid, Entity.RemovalReason.DISCARDED);
             }
         });
@@ -61,6 +67,7 @@ public class EntityRemovePacket extends ExternalServerPacket {
     }
 
     public static void setEntityRemoved(UUID uuid, Entity.RemovalReason reason, int durationInTicks) {
+        if (reason == Entity.RemovalReason.UNLOADED_WITH_PLAYER) return;
         removedEntities.put(uuid, reason);
         ((CraftScheduler) Bukkit.getScheduler()).scheduleInternalTask(() -> {
             removedEntities.remove(uuid, reason);
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerTouchEntityPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerTouchEntityPacket.java
index c51dbf10406a6636c11725fbcb00b6630a5f279d..ba8a69c3129f3249e0c3756592f4ca335587e955 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerTouchEntityPacket.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerTouchEntityPacket.java
@@ -51,7 +51,7 @@ public class PlayerTouchEntityPacket extends ExternalServerPacket {
             if (entity == null) {
                 Entity.RemovalReason removalReason = EntityRemovePacket.removedEntities.get(entityUuid);
                 if (removalReason != null && removalReason.shouldDestroy()) {
-                    connection.send(new EntityRemovePacket(player.level.getWorld().getName(), entityUuid));
+                    connection.send(new EntityRemovePacket(player.level.getWorld().getName(), entityUuid, false));
                     return;
                 }
 
